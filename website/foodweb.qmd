---
title: "Food Web"
---

```{shinylive-python}
#| standalone: true
from shiny import *
from shinywidgets import output_widget, render_widget, register_widget
import numpy as np
import networkx as nx
import csv
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd



app_ui = ui.page_fluid({"style": "background-color: #243447;"},
    ui.div(
        {"style": "height: 1000px; background-color: #243447;"},
        output_widget("fig")
    )
)

def server(input, output, session):
    # @output
    # @render.text
    # @render_widget

    

    G = nx.random_geometric_graph(200, 0.125)

    # matrix = np.loadtxt(open("input/MetaNetwork_Matrix_LTB_June.csv", "rb"), delimiter=",")

    # G = nx.from_numpy_matrix(matrix)

    edge_x = []
    edge_y = []
    for edge in G.edges():
        x0, y0 = G.nodes[edge[0]]['pos']
        x1, y1 = G.nodes[edge[1]]['pos']
        edge_x.append(x0)
        edge_x.append(x1)
        edge_x.append(None)
        edge_y.append(y0)
        edge_y.append(y1)
        edge_y.append(None)

    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=0.5, color='#888'),
        hoverinfo='none',
        mode='lines')

    node_x = []
    node_y = []
    for node in G.nodes():
        x, y = G.nodes[node]['pos']
        node_x.append(x)
        node_y.append(y)

    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers',
        hoverinfo='text',
        marker=dict(
            showscale=True,
            # colorscale options
            #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
            #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
            #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
            colorscale='YlGnBu',
            reversescale=True,
            color=[],
            size=10,
            colorbar=dict(
                thickness=15,
                title='Node Connections',
                xanchor='left',
                titleside='right'
            ),
            line_width=2))
    node_adjacencies = []
    node_text = []
    for node, adjacencies in enumerate(G.adjacency()):
        node_adjacencies.append(len(adjacencies[1]))
        node_text.append('# of connections: '+str(len(adjacencies[1])))

    node_trace.marker.color = node_adjacencies
    node_trace.text = node_text

    fig = go.FigureWidget(data=[edge_trace, node_trace],
                layout=go.Layout(
                    titlefont_size=16,
                    showlegend=False,
                    hovermode='closest',
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))
                    )
    fig.update_layout(
        autosize=True,
        height=1000,
        paper_bgcolor="#243447",
        font_color="white"
    )
    register_widget("fig", fig)



app = App(app_ui, server)

```